/*
 * MIT License
 *
 * Copyright (c) 2021 OroArmor (Eli Orona)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.oroarmor.discordbot;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import com.oroarmor.discordbot.commands.AliasesCommand;
import com.oroarmor.discordbot.commands.ChangePrefixCommand;
import com.oroarmor.discordbot.commands.CommandManager;
import com.oroarmor.discordbot.commands.CommandsCommand;
import com.oroarmor.discordbot.commands.EmbedCommand;
import com.oroarmor.discordbot.commands.FaqCommand;
import com.oroarmor.discordbot.commands.IssueCommand;
import com.oroarmor.discordbot.commands.LinkCommand;
import com.oroarmor.discordbot.commands.ModCommand;
import com.oroarmor.discordbot.commands.ModsCommand;
import com.oroarmor.discordbot.commands.Permissions;
import com.oroarmor.discordbot.commands.PingCommand;
import com.oroarmor.discordbot.commands.RefreshModsCommand;
import com.oroarmor.discordbot.commands.StringCommand;
import com.oroarmor.discordbot.versions.VersionHandler;
import javax.annotation.Nonnull;
import javax.security.auth.login.LoginException;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.ChannelType;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.events.ReadyEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class DiscordBot {
    public static void main(String[] args)
            throws LoginException, InterruptedException {
        // Note: It is important to register your ReadyListener before building
        JDA jda = JDABuilder.createDefault(System.getenv("BOT_TOKEN"))
                .addEventListeners(new EventListener())
                .build();

        if (System.getenv("DEBUG") != null) {
            CommandManager.addCommand(new PingCommand());
        }

        CommandManager.addCommand(new AliasesCommand());
        CommandManager.addCommand(new ChangePrefixCommand());
        CommandManager.addCommand(new CommandsCommand());
        CommandManager.addCommand(new EmbedCommand("architectury", "Links to Architectury.", Permissions.ANY, "Architectury", 0xc76003, "Architectury is required to run Netherite Plus. Download the fabric version: https://www.curseforge.com/minecraft/mc-mods/architectury-fabric or the forge version: https://www.curseforge.com/minecraft/mc-mods/architectury-forge."));
        CommandManager.addCommand(new EmbedCommand("bintray", "Links to OroArmor's bintray repository.", Permissions.ANY, "Bintray", 0x079515, "OroArmor's Bintray page: https://bintray.com/oroarmor/oroarmor\nOroArmor's Bintray Repo: https://dl.bintray.com/oroarmor/oroarmor/"));
        CommandManager.addCommand(new EmbedCommand("fabric-api", "Info about the fabric api.", Permissions.ANY, "Fabric API", 0xfcd98d, "Netherite Plus Fabric requires the fabric api to run. Download it from: https://www.curseforge.com/minecraft/mc-mods/fabric-api."));
        CommandManager.addCommand(new FaqCommand());
        CommandManager.addCommand(new IssueCommand());
        CommandManager.addCommand(new LinkCommand("CurseForge", "https://www.curseforge.com/members/oroarmor/projects", 0x6441A4));
        CommandManager.addCommand(new LinkCommand("Github", "https://github.com/OroArmor", 0x555555));
        CommandManager.addCommand(new LinkCommand("Modrinth", "https://modrinth.com/user/h74rYEcI", 0x079515));
        CommandManager.addCommand(new LinkCommand("Patreon", "https://patreon.com/oroarmor", 0xFF6871));
        CommandManager.addCommand(new LinkCommand("Youtube", "https://www.youtube.com/channel/UCsbVQJhwgXIJ035XUCN9IRw", 0xff0000));
        CommandManager.addCommand(new ModCommand());
        CommandManager.addCommand(new ModsCommand());
        CommandManager.addCommand(new RefreshModsCommand());
        CommandManager.addCommand(new StringCommand("apply-for-mod", "Provides the link to the moderator application page.", Permissions.ANY, "Apply for moderator at: https://forms.gle/F4LPDH7xD96VknY39"));

        CommandManager.addAlias("alias", "aliases");
        CommandManager.addAlias("arch", "architectury");
        CommandManager.addAlias("cf", "curseforge");
        CommandManager.addAlias("command", "commands");
        CommandManager.addAlias("fapi", "fabric-api");
        CommandManager.addAlias("gh", "github");
        CommandManager.addAlias("yt", "youtube");

        // optionally block until JDA is ready
        jda.awaitReady();
    }

    public static class EventListener extends ListenerAdapter {
        public void onMessageReceived(MessageReceivedEvent event) {
            if (event.getMessage().getContentRaw().equals("o/") && event.getAuthor() != event.getJDA().getSelfUser() && event.getChannel().getName().equals("general-chat")) {
                event.getChannel().sendMessage("o/").queue();
            }
            CommandManager.runCommand(event.getMember(), event.getChannel(), event.getMessage());
        }

        @Override
        public void onMessageReactionAdd(@Nonnull MessageReactionAddEvent event) {
            if (event.getChannel().getName().equals("rules")) {
                Role role = event.getGuild().getRoles().stream().filter(role1 -> role1.getName().equals("Mod Lover")).findFirst().orElse(null);
                if (role == null || event.getMember() == null) {
                    return;
                }
                event.getGuild().addRoleToMember(event.getMember(), role).queue();
            }
        }

        @Override
        public void onReady(@Nonnull ReadyEvent event) {
            System.out.println("Logged in!");
            List<Guild> reportVersionGuilds = event.getJDA().getGuilds().stream().filter(guild -> guild.getChannels().stream().anyMatch(channel -> channel.getName().equals("external-updates") && channel.getType() == ChannelType.TEXT)).collect(Collectors.toList());

            reportVersionGuilds.stream()
                    .map(Guild::getChannels)
                    .flatMap(Collection::stream)
                    .filter(channel -> channel.getName().equals("external-updates") && channel.getType() == ChannelType.TEXT)
                    .map(TextChannel.class::cast)
                    .forEach(DiscordBot::addVersionUpdatesToChannel);
        }
    }

    public static void addVersionUpdatesToChannel(TextChannel channel) {
        VersionHandler handler = new VersionHandler(channel);

        handler.addChecker(new VersionHandler.QuiltMinecraftMetaChecker());

        handler.addChecker(new VersionHandler.MetaChecker("https://meta.fabricmc.net/v2/versions/loader", "Fabric Loader"));
        handler.addChecker(new VersionHandler.MetaChecker("https://meta.fabricmc.net/v2/versions/yarn", "Yarn"));

        handler.addChecker(new VersionHandler.MetaChecker("https://meta.quiltmc.org/v3/versions/hashed", "Hashed Mojmap"));
        handler.addChecker(new VersionHandler.MetaChecker("https://meta.quiltmc.org/v3/versions/quilt-mappings", "Quilt Mappings"));

        List<String> repositories = List.of("FabricMC/fabric", "terraformersmc/modmenu");

        for (String repository : repositories) {
            handler.addChecker(new VersionHandler.GithubReleasesChecker(repository));
        }

        handler.addChecker(new VersionHandler.MavenMetadataChecker("https://maven.architectury.dev/me/shedaniel/architectury/maven-metadata.xml", "Architectury"));
        handler.addChecker(new VersionHandler.MavenMetadataChecker("https://maven.minecraftforge.net/net/minecraftforge/forge/maven-metadata.xml", "Forge"));

        handler.addChecker(new VersionHandler.MavenMetadataChecker("https://maven.quiltmc.org/repository/release/org/quiltmc/quiltflower/maven-metadata.xml", "QuiltFlower"));

        new Thread(() -> {
            while (true) {
                handler.update();
                try {
                    TimeUnit.MINUTES.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }
}

